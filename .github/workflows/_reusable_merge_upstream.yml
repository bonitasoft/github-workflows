name: Merge Branch Upstream

on:
  workflow_call:
    secrets:
     KSM_CONFIG:
      required: true
     BONITA_CI_PAT:
      required: true
env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  merge-in-upstream-branch:
    runs-on: ubuntu-22.04
    steps:
      - name: Setup git
        uses: bonitasoft/git-setup-action@v1
        with:
          keeper-secret-config: ${{ secrets.KSM_CONFIG }}

      - name: Determine upstream branch
        id: upstream-branch
        run: echo "ref=${{ fromJson(vars.SUPPORTED_BRANCHES).upstream-branch[github.ref_name] }}" >> $GITHUB_OUTPUT

      - name: Checkout upstream branch
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.upstream-branch.outputs.ref }}
          fetch-depth: 0
          token: ${{ secrets.BONITA_CI_PAT }}

      - name: Merge upstream branch
        run: |
           git merge origin/${{ github.ref_name }} -m "chore(merge): ${{ github.ref_name }} into ${{ steps.upstream-branch.outputs.ref }}"
           git push

  create-merge-pr-in-conflict:
    needs: merge-in-upstream-branch
    if: failure()
    runs-on: ubuntu-22.04
    permissions: 
      pull-requests: write
      contents: write
      actions: read
      checks: read
      repository-projects: read
      statuses: read
    steps:
      - name: Determine upstream branch
        id: upstream-branch
        run: echo "ref=${{ fromJson(vars.SUPPORTED_BRANCHES).upstream-branch[github.ref_name] }}" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0 # Required to retrieve the last non merge commit author

      - name: Find assignee GitHub login
        id: assignee
        run: |
          # Search author email of the latest non merge commit in current branch history
          author_email=$(git log -1 --no-merges --pretty=format:'%ae')
          # Store associated Github handle find by the gh api. Might be empty when user email is not public.
          echo "login=$(gh search commits -L 1 --author-email=$author_email --json author -q '.[].author.login')" >> $GITHUB_OUTPUT

      - id: existing-pr
        name: Check opened Pull Request
        run: >
          echo "pr-url=$(gh pr list
          --base ${{ steps.upstream-branch.outputs.ref }}
          --head ${{ github.ref_name }}
          --json url
          --jq '[.[]|.url][0]')" >> "$GITHUB_OUTPUT"

      - id: create-pr
        if: ${{ steps.existing-pr.outputs.pr-url == '' }}
        name: Create Pull Request
        env:
          # Use bonita-ci user access token to force triggering of events
          GH_TOKEN: ${{ secrets.BONITA_CI_PAT }}
        run: >
          pr_url=$(gh pr create
          --base ${{ steps.upstream-branch.outputs.ref }}
          --assignee ${{ steps.assignee.outputs.login || github.actor }}
          --title "[merge] ${{ github.ref_name}} into ${{ steps.upstream-branch.outputs.ref }}"
          --body "Merge Pull request opened automatically. Use Merge Pull Request action (DO NOT SQUASH).\nDO NOT commit conflict resolution update to the base branch (default option in Github UI).")
          && echo "pr-url=$pr_url" >> "$GITHUB_OUTPUT"
